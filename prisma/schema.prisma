generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model customer {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String   @db.Uuid
  company_name   String?  @db.VarChar(255)
  contact_number String?  @db.VarChar(255)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  user           user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model developer {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String   @db.Uuid
  specialty        String?  @db.VarChar(255)
  experience_years Int?
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  user             user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model error_log {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  error_message   String       @db.VarChar(255)
  error_code      Int
  occurred_at     DateTime     @default(now()) @db.Timestamp(6)
  resolved_at     DateTime?    @db.Timestamp(6)
  user_id         String       @db.Uuid
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?     @db.VarChar(255)
  name        String      @db.VarChar(255)
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  user_id     String      @db.Uuid
  tenant_id   String      @db.VarChar(255)
  error_log   error_log[]
  user        user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model support_staff {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String   @db.Uuid
  specialty        String?  @db.VarChar(255)
  experience_years Int?
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  user             user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String          @unique @db.VarChar(255)
  firstName     String?         @db.VarChar(255)
  lastName      String?         @db.VarChar(255)
  roq_user_id   String          @db.VarChar(255)
  tenant_id     String          @db.VarChar(255)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  customer      customer[]
  developer     developer[]
  error_log     error_log[]
  organization  organization[]
  support_staff support_staff[]
}
